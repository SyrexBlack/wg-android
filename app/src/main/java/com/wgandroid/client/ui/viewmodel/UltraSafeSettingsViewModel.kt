package com.wgandroid.client.ui.viewmodel

import android.content.Context
import android.content.SharedPreferences
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.delay
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext

data class UltraSafeConnectionStatus(
    val isSuccess: Boolean,
    val message: String
)

data class UltraSafeSettingsUiState(
    val serverUrl: String = "",
    val serverPassword: String = "",
    val isLoading: Boolean = false,
    val urlError: String? = null,
    val connectionStatus: UltraSafeConnectionStatus? = null,
    val settingsSaved: Boolean = false,
    val initError: String? = null,
    val debugLog: List<String> = emptyList()
)

class UltraSafeSettingsViewModel : ViewModel() {
    private var sharedPreferences: SharedPreferences? = null
    
    private val _uiState = MutableStateFlow(UltraSafeSettingsUiState())
    val uiState: StateFlow<UltraSafeSettingsUiState> = _uiState.asStateFlow()
    
    companion object {
        private const val PREFS_NAME = "wg_android_prefs"
        private const val KEY_SERVER_URL = "server_url"
        private const val KEY_SERVER_PASSWORD = "server_password"
    }
    
    private fun addDebugLog(message: String) {
        val currentLogs = _uiState.value.debugLog.takeLast(4) // Keep only last 5 entries
        _uiState.value = _uiState.value.copy(
            debugLog = currentLogs + message
        )
    }
    
    fun initializeWithContext(context: Context) {
        addDebugLog("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")
        
        try {
            // Ultra-safe SharedPreferences initialization
            sharedPreferences = try {
                addDebugLog("üìÅ –°–æ–∑–¥–∞–µ–º SharedPreferences...")
                context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
            } catch (e: Exception) {
                addDebugLog("‚ùå –û—à–∏–±–∫–∞ SharedPreferences: ${e.message}")
                _uiState.value = _uiState.value.copy(
                    initError = "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º: ${e.message}"
                )
                return
            }
            
            addDebugLog("‚úÖ SharedPreferences —Å–æ–∑–¥–∞–Ω")
            
            // Ultra-safe settings loading
            loadSettingsUltraSafely()
            
        } catch (e: Exception) {
            addDebugLog("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e.message}")
            _uiState.value = _uiState.value.copy(
                initError = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${e.message}"
            )
        }
    }
    
    private fun loadSettingsUltraSafely() {
        try {
            addDebugLog("üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
            
            sharedPreferences?.let { prefs ->
                val url = try {
                    prefs.getString(KEY_SERVER_URL, "") ?: ""
                } catch (e: Exception) {
                    addDebugLog("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è URL: ${e.message}")
                    ""
                }
                
                val password = try {
                    prefs.getString(KEY_SERVER_PASSWORD, "") ?: ""
                } catch (e: Exception) {
                    addDebugLog("‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è: ${e.message}")
                    ""
                }
                
                _uiState.value = _uiState.value.copy(
                    serverUrl = url,
                    serverPassword = password,
                    initError = null
                )
                
                addDebugLog("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: URL=${url.take(20)}...")
            }
        } catch (e: Exception) {
            addDebugLog("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message}")
            _uiState.value = _uiState.value.copy(
                initError = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${e.message}"
            )
        }
    }
    
    fun updateServerUrl(url: String) {
        _uiState.value = _uiState.value.copy(
            serverUrl = url,
            urlError = null,
            connectionStatus = null
        )
        addDebugLog("üìù URL –æ–±–Ω–æ–≤–ª–µ–Ω: ${url.take(20)}...")
    }
    
    fun updateServerPassword(password: String) {
        _uiState.value = _uiState.value.copy(
            serverPassword = password,
            connectionStatus = null
        )
        addDebugLog("üîë –ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
    }
    
    fun testConnection() {
        val url = _uiState.value.serverUrl.trim()
        
        addDebugLog("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        if (url.isBlank()) {
            addDebugLog("‚ùå URL –ø—É—Å—Ç–æ–π")
            _uiState.value = _uiState.value.copy(
                urlError = "URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )
            return
        }
        
        if (!isValidUrl(url)) {
            addDebugLog("‚ùå URL –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            _uiState.value = _uiState.value.copy(
                urlError = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL"
            )
            return
        }
        
        addDebugLog("‚úÖ URL –≤–∞–ª–∏–¥–Ω—ã–π: $url")
        
        // ULTRA-SAFE coroutine launch
        viewModelScope.launch {
            try {
                addDebugLog("‚è≥ –ù–∞—á–∏–Ω–∞–µ–º async –æ–ø–µ—Ä–∞—Ü–∏—é...")
                
                _uiState.value = _uiState.value.copy(
                    isLoading = true,
                    connectionStatus = null,
                    urlError = null
                )
                
                // Phase 1: Test basic HTTP connectivity (mock first)
                addDebugLog("üîó –§–∞–∑–∞ 1: –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
                
                withContext(Dispatchers.IO) {
                    try {
                        // Simulate network delay
                        delay(1000)
                        addDebugLog("üì° –°–∏–º—É–ª—è—Ü–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...")
                        
                        // Phase 2: Simulate API response
                        delay(1000) 
                        addDebugLog("üìä –°–∏–º—É–ª—è—Ü–∏—è API –æ—Ç–≤–µ—Ç–∞...")
                        
                        // Mock success for now - no real API calls yet
                        val mockClientsCount = (0..10).random()
                        addDebugLog("‚úÖ –ú–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç: $mockClientsCount –∫–ª–∏–µ–Ω—Ç–æ–≤")
                        
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            connectionStatus = UltraSafeConnectionStatus(
                                isSuccess = true,
                                message = "üéØ –¢–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω (–º–æ–∫: $mockClientsCount –∫–ª–∏–µ–Ω—Ç–æ–≤)"
                            )
                        )
                        
                    } catch (e: Exception) {
                        addDebugLog("üí• –û—à–∏–±–∫–∞ –≤ IO: ${e.message}")
                        
                        _uiState.value = _uiState.value.copy(
                            isLoading = false,
                            connectionStatus = UltraSafeConnectionStatus(
                                isSuccess = false,
                                message = "‚ùå –û—à–∏–±–∫–∞ IO: ${e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"}"
                            )
                        )
                    }
                }
                
            } catch (e: Exception) {
                addDebugLog("üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞: ${e.message}")
                
                _uiState.value = _uiState.value.copy(
                    isLoading = false,
                    connectionStatus = UltraSafeConnectionStatus(
                        isSuccess = false,
                        message = "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${e.message ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è"}"
                    )
                )
            }
        }
    }
    
    fun saveSettings() {
        val url = _uiState.value.serverUrl.trim()
        val password = _uiState.value.serverPassword
        
        addDebugLog("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏...")
        
        if (url.isBlank()) {
            addDebugLog("‚ùå URL –ø—É—Å—Ç–æ–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
            _uiState.value = _uiState.value.copy(
                urlError = "URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            )
            return
        }
        
        if (!isValidUrl(url)) {
            addDebugLog("‚ùå URL –Ω–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")
            _uiState.value = _uiState.value.copy(
                urlError = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL"
            )
            return
        }
        
        // Ultra-safe SharedPreferences save
        try {
            sharedPreferences?.edit()?.apply {
                putString(KEY_SERVER_URL, url)
                putString(KEY_SERVER_PASSWORD, password)
                apply()
            }
            
            addDebugLog("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
            
            _uiState.value = _uiState.value.copy(
                settingsSaved = true,
                urlError = null,
                connectionStatus = UltraSafeConnectionStatus(
                    isSuccess = true,
                    message = "üíæ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã"
                )
            )
            
        } catch (e: Exception) {
            addDebugLog("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}")
            
            _uiState.value = _uiState.value.copy(
                urlError = "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${e.message}",
                connectionStatus = UltraSafeConnectionStatus(
                    isSuccess = false,
                    message = "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${e.message}"
                )
            )
        }
    }
    
    fun clearSavedState() {
        _uiState.value = _uiState.value.copy(
            settingsSaved = false,
            connectionStatus = null
        )
        addDebugLog("üßπ –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ")
    }
    
    fun clearInitError() {
        _uiState.value = _uiState.value.copy(initError = null)
        addDebugLog("üßπ –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω–∞")
    }
    
    fun clearDebugLog() {
        _uiState.value = _uiState.value.copy(debugLog = emptyList())
    }
    
    private fun isValidUrl(url: String): Boolean {
        return try {
            when {
                url.startsWith("http://") || url.startsWith("https://") -> {
                    // Basic validation
                    val hasValidChars = url.contains("://") && url.length > 10
                    hasValidChars
                }
                else -> false
            }
        } catch (e: Exception) {
            false
        }
    }
} 