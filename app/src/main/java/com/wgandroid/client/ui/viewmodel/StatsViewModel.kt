package com.wgandroid.client.ui.viewmodel

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.patrykandpatrick.vico.core.entry.FloatEntry
import com.wgandroid.client.data.model.WireguardClient
import com.wgandroid.client.ui.screen.ClientStatistic
import com.wgandroid.client.ui.screen.ClientTrafficStat
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import java.text.SimpleDateFormat
import java.util.*
import kotlin.random.Random

data class StatsUiState(
    val totalClients: Int = 0,
    val activeClients: Int = 0,
    val totalDownload: Long = 0,
    val totalUpload: Long = 0,
    val downloadHistory: List<FloatEntry> = emptyList(),
    val uploadHistory: List<FloatEntry> = emptyList(),
    val topClientsByTraffic: List<ClientTrafficStat> = emptyList(),
    val hourlyActivity: Map<Int, Int> = emptyMap(),
    val clientStats: List<ClientStatistic> = emptyList(),
    val isLoading: Boolean = false,
    val errorMessage: String? = null
)

class StatsViewModel : ViewModel() {
    private val _uiState = MutableStateFlow(StatsUiState())
    val uiState: StateFlow<StatsUiState> = _uiState.asStateFlow()
    
    private var clients: List<WireguardClient> = emptyList()
    
    fun updateClients(newClients: List<WireguardClient>) {
        clients = newClients
        generateStatistics()
    }
    
    fun refreshStats() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isLoading = true)
            
            // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            kotlinx.coroutines.delay(1000)
            
            generateStatistics()
            
            _uiState.value = _uiState.value.copy(isLoading = false)
        }
    }
    
    fun exportStats() {
        viewModelScope.launch {
            try {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ CSV/JSON
                _uiState.value = _uiState.value.copy(
                    errorMessage = "üìä –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏"
                )
                
                // Auto-clear message
                kotlinx.coroutines.delay(3000)
                _uiState.value = _uiState.value.copy(errorMessage = null)
            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    errorMessage = "–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${e.message}"
                )
            }
        }
    }
    
    private fun generateStatistics() {
        viewModelScope.launch {
            val totalClients = clients.size
            val activeClients = clients.count { it.enabled }
            val totalDownload = clients.sumOf { it.transferRx }
            val totalUpload = clients.sumOf { it.transferTx }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞—Ñ–∏–∫–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
            val downloadHistory = generateTrafficHistory(totalDownload)
            val uploadHistory = generateTrafficHistory(totalUpload)
            
            // –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É
            val topClients = clients
                .map { ClientTrafficStat(it.name, it.transferRx + it.transferTx) }
                .sortedByDescending { it.totalTraffic }
                .take(5)
            
            // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º (—Å–∏–º—É–ª—è—Ü–∏—è)
            val hourlyActivity = generateHourlyActivity(activeClients)
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
            val clientStats = clients.map { client ->
                ClientStatistic(
                    name = client.name,
                    isActive = client.enabled,
                    downloadBytes = client.transferRx,
                    uploadBytes = client.transferTx,
                    lastSeen = formatLastSeen(client.createdAt)
                )
            }
            
            _uiState.value = _uiState.value.copy(
                totalClients = totalClients,
                activeClients = activeClients,
                totalDownload = totalDownload,
                totalUpload = totalUpload,
                downloadHistory = downloadHistory,
                uploadHistory = uploadHistory,
                topClientsByTraffic = topClients,
                hourlyActivity = hourlyActivity,
                clientStats = clientStats
            )
        }
    }
    
    private fun generateTrafficHistory(totalTraffic: Long): List<FloatEntry> {
        val entries = mutableListOf<FloatEntry>()
        val baseTraffic = (totalTraffic / 7.0).toFloat()
        
        for (day in 0..6) {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –≤–∞—Ä–∏–∞—Ü–∏–µ–π
            val variation = Random.nextFloat() * 0.4f + 0.8f // 80-120% –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
            val dailyTraffic = baseTraffic * variation
            entries.add(FloatEntry(day.toFloat(), dailyTraffic))
        }
        
        return entries
    }
    
    private fun generateHourlyActivity(activeClients: Int): Map<Int, Int> {
        val activity = mutableMapOf<Int, Int>()
        
        for (hour in 0..23) {
            // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –ø–∏–∫ –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã (9-18) –∏ –≤–µ—á–µ—Ä–æ–º (19-23)
            val baseActivity = when (hour) {
                in 0..6 -> 0.1 // –ù–æ—á—å - –Ω–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                in 7..8 -> 0.3 // –£—Ç—Ä–æ - —Å—Ä–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                in 9..18 -> 0.8 // –†–∞–±–æ—á–∏–π –¥–µ–Ω—å - –≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                in 19..23 -> 0.6 // –í–µ—á–µ—Ä - —Å—Ä–µ–¥–Ω–µ-–≤—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                else -> 0.2
            }
            
            val clients = (activeClients * baseActivity * (Random.nextFloat() * 0.4f + 0.8f)).toInt()
            activity[hour] = clients.coerceAtLeast(0)
        }
        
        return activity
    }
    
    private fun formatLastSeen(createdAt: String?): String? {
        return createdAt?.let {
            try {
                val inputFormat = SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.getDefault())
                val outputFormat = SimpleDateFormat("dd.MM.yyyy HH:mm", Locale.getDefault())
                val date = inputFormat.parse(it)
                date?.let { outputFormat.format(it) }
            } catch (e: Exception) {
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            }
        }
    }
    
    fun clearError() {
        _uiState.value = _uiState.value.copy(errorMessage = null)
    }
} 