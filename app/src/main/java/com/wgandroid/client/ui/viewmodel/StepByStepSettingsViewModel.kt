package com.wgandroid.client.ui.viewmodel

import android.app.Application
import android.content.Context
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.wgandroid.client.data.api.SafeApiClient
import com.wgandroid.client.data.api.TestApiClient
import com.wgandroid.client.data.repository.SafeWireguardRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class StepByStepSettingsViewModel(application: Application) : AndroidViewModel(application) {
    
    private val _currentStep = MutableStateFlow(0)
    val currentStep: StateFlow<Int> = _currentStep
    
    private val _stepResult = MutableStateFlow("")
    val stepResult: StateFlow<String> = _stepResult
    
    private val _debugLog = MutableStateFlow("")
    val debugLog: StateFlow<String> = _debugLog
    
    private fun addToLog(message: String) {
        val timestamp = System.currentTimeMillis()
        val newLog = _debugLog.value + "\n[$timestamp] $message"
        _debugLog.value = newLog
        Log.d("StepByStep", message)
    }
    
    fun testConnection(serverUrl: String, password: String) {
        viewModelScope.launch {
            try {
                addToLog("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–û–®–ê–ì–û–í–û ===")
                addToLog("–°–µ—Ä–≤–µ—Ä: $serverUrl")
                addToLog("–ü–∞—Ä–æ–ª—å: ${password.take(3)}***")
                
                // –®–∞–≥ 1: –¢–µ—Å—Ç SharedPreferences
                _currentStep.value = 1
                _stepResult.value = "–¢–µ—Å—Ç–∏—Ä—É–µ–º SharedPreferences..."
                testSharedPreferences()
                
                // –®–∞–≥ 2: –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ SafeApiClient
                _currentStep.value = 2
                _stepResult.value = "–ü—Ä–æ–≤–µ—Ä—è–µ–º SafeApiClient..."
                testSafeApiClientClass()
                
                // –®–∞–≥ 3: –¢–µ—Å—Ç —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏  
                _currentStep.value = 3
                _stepResult.value = "–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ª–æ–≥–∏–Ω–∞..."
                testLoginFormats(serverUrl, password)
                
                // –®–∞–≥ 4: –¢–µ—Å—Ç setServerConfig()
                _currentStep.value = 4
                _stepResult.value = "–¢–µ—Å—Ç–∏—Ä—É–µ–º setServerConfig()..."
                testSetServerConfig(serverUrl, password)
                
                // –®–∞–≥ 5: –¢–µ—Å—Ç –∫–ª–∞—Å—Å–∞ SafeWireguardRepository
                _currentStep.value = 5
                _stepResult.value = "–ü—Ä–æ–≤–µ—Ä—è–µ–º SafeWireguardRepository..."
                testSafeWireguardRepositoryClass()
                
                // –®–∞–≥ 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
                _currentStep.value = 6
                _stepResult.value = "–°–æ–∑–¥–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
                testRepositoryCreation()
                
                // –®–∞–≥ 7: –ú–æ–∫ API —Å–∏–º—É–ª—è—Ü–∏—è
                _currentStep.value = 7
                _stepResult.value = "–°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É API..."
                testMockApiSimulation()
                
                _stepResult.value = "‚úÖ –í–°–ï –®–ê–ì–ò –ó–ê–í–ï–†–®–ï–ù–´!"
                addToLog("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===")
                
            } catch (e: Exception) {
                addToLog("‚ùå –û–®–ò–ë–ö–ê –ù–ê –®–ê–ì–ï ${_currentStep.value}: ${e.message}")
                _stepResult.value = "‚ùå –û—à–∏–±–∫–∞: ${e.message}"
            }
        }
    }
    
    private fun testSharedPreferences() {
        try {
            val context = getApplication<Application>()
            val prefs = context.getSharedPreferences("wg_android_prefs", Context.MODE_PRIVATE)
            prefs.edit().putString("test_key", "test_value").apply()
            val value = prefs.getString("test_key", null)
            
            if (value == "test_value") {
                addToLog("‚úÖ –®–∞–≥ 1: SharedPreferences —Ä–∞–±–æ—Ç–∞—é—Ç")
            } else {
                addToLog("‚ùå –®–∞–≥ 1: SharedPreferences –ù–ï —Ä–∞–±–æ—Ç–∞—é—Ç")
            }
        } catch (e: Exception) {
            addToLog("‚ùå –®–∞–≥ 1 –û–®–ò–ë–ö–ê: ${e.message}")
            throw e
        }
    }
    
    private fun testSafeApiClientClass() {
        try {
            // SafeApiClient - —ç—Ç–æ object, –Ω–µ class
            addToLog("‚úÖ –®–∞–≥ 2: Object SafeApiClient –¥–æ—Å—Ç—É–ø–µ–Ω")
        } catch (e: Exception) {
            addToLog("‚ùå –®–∞–≥ 2 –û–®–ò–ë–ö–ê: ${e.message}")
            throw e
        }
    }
    
    private fun testLoginFormats(serverUrl: String, password: String) {
        try {
            addToLog("üîç –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ª–æ–≥–∏–Ω–∞...")
            val testClient = TestApiClient()
            testClient.testLogin(serverUrl, password)
            addToLog("‚úÖ –®–∞–≥ 3: –¢–µ—Å—Ç—ã —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω—ã (—Å–º. –ª–æ–≥–∏ TestApiClient)")
        } catch (e: Exception) {
            addToLog("‚ùå –®–∞–≥ 3 –û–®–ò–ë–ö–ê: ${e.message}")
            throw e
        }
    }
    
    private suspend fun testSetServerConfig(serverUrl: String, password: String) {
        try {
            addToLog("üîß –í—ã–∑—ã–≤–∞–µ–º SafeApiClient.setServerConfig()...")
            // SafeApiClient - —ç—Ç–æ object, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
            SafeApiClient.setServerConfig(serverUrl, password)
            addToLog("‚úÖ –®–∞–≥ 4: SafeApiClient.setServerConfig() –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫")
        } catch (e: Exception) {
            addToLog("‚ùå –®–∞–≥ 4 –û–®–ò–ë–ö–ê: ${e.message}")
            throw e
        }
    }
    
    private fun testSafeWireguardRepositoryClass() {
        try {
            // –ü—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞—Å—Å –¥–æ—Å—Ç—É–ø–µ–Ω
            SafeWireguardRepository::class.java
            addToLog("‚úÖ –®–∞–≥ 5: –ö–ª–∞—Å—Å SafeWireguardRepository –¥–æ—Å—Ç—É–ø–µ–Ω")
        } catch (e: Exception) {
            addToLog("‚ùå –®–∞–≥ 5 –û–®–ò–ë–ö–ê: ${e.message}")
            throw e
        }
    }
    
    private fun testRepositoryCreation() {
        try {
            // SafeApiClient - object, SafeWireguardRepository - class
            val repository = SafeWireguardRepository()
            addToLog("‚úÖ –®–∞–≥ 6: SafeWireguardRepository —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        } catch (e: Exception) {
            addToLog("‚ùå –®–∞–≥ 6 –û–®–ò–ë–ö–ê: ${e.message}")
            throw e
        }
    }
    
    private fun testMockApiSimulation() {
        try {
            addToLog("üé≠ –°–∏–º—É–ª–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–µ API –≤—ã–∑–æ–≤—ã...")
            Thread.sleep(1000) // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            addToLog("‚úÖ –®–∞–≥ 7: –ú–æ–∫ API —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        } catch (e: Exception) {
            addToLog("‚ùå –®–∞–≥ 7 –û–®–ò–ë–ö–ê: ${e.message}")
            throw e
        }
    }
} 