package com.wgandroid.client.ui.viewmodel

import android.app.Application
import android.content.ClipData
import android.content.ClipboardManager
import android.content.Context
import android.os.Environment
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import com.wgandroid.client.data.api.SmartApiClient
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import java.io.File
import java.io.FileWriter
import java.text.SimpleDateFormat
import java.util.*

class SmartSettingsViewModel(application: Application) : AndroidViewModel(application) {
    
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading
    
    private val _result = MutableStateFlow("")
    val result: StateFlow<String> = _result
    
    private val _debugLog = MutableStateFlow("")
    val debugLog: StateFlow<String> = _debugLog
    
    private val _successfulFormat = MutableStateFlow<String?>(null)
    val successfulFormat: StateFlow<String?> = _successfulFormat
    
    private val _exportResult = MutableStateFlow("")
    val exportResult: StateFlow<String> = _exportResult
    
    private fun addToLog(message: String) {
        val timestamp = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())
        val newLog = _debugLog.value + "\n[$timestamp] $message"
        _debugLog.value = newLog
        Log.d("SmartSettings", message)
    }
    
    fun findFormatAndConnect(serverUrl: String, password: String) {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _result.value = "–ò—â–µ–º —Ä–∞–±–æ—á–∏–π —Ñ–æ—Ä–º–∞—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏..."
                
                addToLog("üß† === SMART API –ü–û–ò–°–ö ===")
                addToLog("–°–µ—Ä–≤–µ—Ä: $serverUrl")
                addToLog("–ü–∞—Ä–æ–ª—å: ${password.take(3)}***")
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∏–∑ SmartApiClient
                SmartApiClient.setLogCallback { message ->
                    addToLog(message)
                }
                
                // SmartApiClient –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ—Ç —Ä–∞–±–æ—á–∏–π —Ñ–æ—Ä–º–∞—Ç
                SmartApiClient.setServerConfig(serverUrl, password)
                
                // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                val format = SmartApiClient.getSuccessfulFormat()
                _successfulFormat.value = format
                
                if (format != null) {
                    _result.value = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!"
                    addToLog("‚úÖ SUCCESS! –†–∞–±–æ—á–∏–π —Ñ–æ—Ä–º–∞—Ç: $format")
                    addToLog("üç™ Cookies —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
                } else {
                    _result.value = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π —Ñ–æ—Ä–º–∞—Ç"
                    addToLog("‚ùå FAILED: –ù–∏ –æ–¥–∏–Ω —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                }
                
            } catch (e: Exception) {
                _result.value = "‚ùå –û—à–∏–±–∫–∞: ${e.message}"
                addToLog("‚ùå ERROR: ${e.message}")
                addToLog("‚ùå STACK TRACE: ${e.stackTrace.joinToString("\n")}")
            } finally {
                _isLoading.value = false
            }
        }
    }
    
    fun testApiCalls() {
        viewModelScope.launch {
            try {
                _isLoading.value = true
                _result.value = "–¢–µ—Å—Ç–∏—Ä—É–µ–º API –≤—ã–∑–æ–≤—ã..."
                
                addToLog("üöÄ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ===")
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∏–∑ SmartApiClient
                SmartApiClient.setLogCallback { message ->
                    addToLog(message)
                }
                
                // –ü–æ–ª—É—á–∞–µ–º API service
                val apiService = SmartApiClient.getApiService()
                addToLog("‚úÖ API Service –ø–æ–ª—É—á–µ–Ω")
                
                // –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
                addToLog("üìã –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤...")
                val clientsResponse = apiService.getClients()
                
                if (clientsResponse.isSuccessful) {
                    val clients = clientsResponse.body()
                    addToLog("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã: ${clients?.size ?: 0} —à—Ç.")
                    _result.value = "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç! –ö–ª–∏–µ–Ω—Ç–æ–≤: ${clients?.size ?: 0}"
                } else {
                    addToLog("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤: HTTP ${clientsResponse.code()}")
                    _result.value = "‚ùå API –æ—à–∏–±–∫–∞: HTTP ${clientsResponse.code()}"
                }
                
            } catch (e: Exception) {
                _result.value = "‚ùå –û—à–∏–±–∫–∞ API: ${e.message}"
                addToLog("‚ùå API ERROR: ${e.message}")
                addToLog("‚ùå API STACK TRACE: ${e.stackTrace.joinToString("\n")}")
            } finally {
                _isLoading.value = false
            }
        }
    }
    
    fun exportLogToFile() {
        viewModelScope.launch {
            try {
                val timestamp = SimpleDateFormat("yyyy-MM-dd_HH-mm-ss", Locale.getDefault()).format(Date())
                val fileName = "wg_android_log_$timestamp.txt"
                
                val logContent = buildString {
                    append("=== WG ANDROID SMART API LOG ===\n")
                    append("–î–∞—Ç–∞: ${SimpleDateFormat("dd.MM.yyyy HH:mm:ss", Locale.getDefault()).format(Date())}\n")
                    append("–£—Å–ø–µ—à–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${_successfulFormat.value ?: "–ù–µ –Ω–∞–π–¥–µ–Ω"}\n")
                    append("–°—Ç–∞—Ç—É—Å: ${_result.value}\n")
                    append("\n=== –ü–û–î–†–û–ë–ù–´–ô –õ–û–ì ===\n")
                    append(_debugLog.value)
                    append("\n\n=== –ö–û–ù–ï–¶ –õ–û–ì–ê ===\n")
                }
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Downloads
                val downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
                val file = File(downloadsDir, fileName)
                
                FileWriter(file).use { writer ->
                    writer.write(logContent)
                }
                
                _exportResult.value = "‚úÖ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${file.absolutePath}"
                addToLog("üìÅ –õ–æ–≥ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤: ${file.absolutePath}")
                
            } catch (e: Exception) {
                _exportResult.value = "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${e.message}"
                addToLog("‚ùå EXPORT ERROR: ${e.message}")
            }
        }
    }
    
    fun copyLogToClipboard() {
        try {
            val logContent = buildString {
                append("=== WG ANDROID SMART API LOG ===\n")
                append("–î–∞—Ç–∞: ${SimpleDateFormat("dd.MM.yyyy HH:mm:ss", Locale.getDefault()).format(Date())}\n")
                append("–£—Å–ø–µ—à–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: ${_successfulFormat.value ?: "–ù–µ –Ω–∞–π–¥–µ–Ω"}\n")
                append("–°—Ç–∞—Ç—É—Å: ${_result.value}\n")
                append("\n=== –ü–û–î–†–û–ë–ù–´–ô –õ–û–ì ===\n")
                append(_debugLog.value)
                append("\n\n=== –ö–û–ù–ï–¶ –õ–û–ì–ê ===\n")
            }
            
            val clipboard = getApplication<Application>().getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
            val clip = ClipData.newPlainText("WG Android Log", logContent)
            clipboard.setPrimaryClip(clip)
            
            _exportResult.value = "‚úÖ –õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞"
            addToLog("üìã –õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞")
            
        } catch (e: Exception) {
            _exportResult.value = "‚ùå –û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: ${e.message}"
            addToLog("‚ùå CLIPBOARD ERROR: ${e.message}")
        }
    }
    
    fun clearLog() {
        _debugLog.value = ""
        _exportResult.value = ""
        _result.value = ""
        _successfulFormat.value = null
    }
} 