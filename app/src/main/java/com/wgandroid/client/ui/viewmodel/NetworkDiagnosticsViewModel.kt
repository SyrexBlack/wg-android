package com.wgandroid.client.ui.viewmodel

import android.app.Application
import android.os.Environment
import android.util.Log
import androidx.lifecycle.AndroidViewModel
import androidx.lifecycle.viewModelScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import java.io.File
import java.io.FileWriter
import java.net.InetAddress
import java.net.URL
import java.text.SimpleDateFormat
import java.util.*
import java.util.concurrent.TimeUnit

data class NetworkDiagnosticsUiState(
    val serverUrl: String = "",
    val password: String = "",
    val isRunning: Boolean = false,
    val logEntries: List<String> = emptyList(),
    val exportResult: String = ""
)

class NetworkDiagnosticsViewModel(application: Application) : AndroidViewModel(application) {
    
    private val _uiState = MutableStateFlow(NetworkDiagnosticsUiState())
    val uiState: StateFlow<NetworkDiagnosticsUiState> = _uiState.asStateFlow()
    
    private fun addLog(message: String) {
        val timestamp = SimpleDateFormat("HH:mm:ss", Locale.getDefault()).format(Date())
        val logEntry = "[$timestamp] $message"
        
        _uiState.value = _uiState.value.copy(
            logEntries = _uiState.value.logEntries + logEntry
        )
        
        Log.d("NetworkDiagnostics", message)
    }
    
    fun setServerUrl(url: String) {
        _uiState.value = _uiState.value.copy(serverUrl = url)
    }
    
    fun setPassword(password: String) {
        _uiState.value = _uiState.value.copy(password = password)
    }
    
    fun clearLog() {
        _uiState.value = _uiState.value.copy(
            logEntries = emptyList(),
            exportResult = ""
        )
    }
    
    fun runBasicTests() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isRunning = true)
            
            try {
                addLog("üîß === –ë–ê–ó–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===")
                
                val url = _uiState.value.serverUrl.trim()
                if (url.isEmpty()) {
                    addLog("‚ùå URL —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —É–∫–∞–∑–∞–Ω")
                    return@launch
                }
                
                addLog("üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä: $url")
                
                // Test 1: URL validation
                testUrlValidation(url)
                
                // Test 2: DNS resolution
                testDnsResolution(url)
                
                // Test 3: Basic connectivity
                testBasicConnectivity(url)
                
                // Test 4: HTTP response
                testHttpResponse(url)
                
                addLog("‚úÖ –ë–∞–∑–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
            } catch (e: Exception) {
                addLog("‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${e.message}")
            } finally {
                _uiState.value = _uiState.value.copy(isRunning = false)
            }
        }
    }
    
    fun runAdvancedTests() {
        viewModelScope.launch {
            _uiState.value = _uiState.value.copy(isRunning = true)
            
            try {
                addLog("üî¨ === –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê ===")
                
                val url = _uiState.value.serverUrl.trim()
                val password = _uiState.value.password.trim()
                
                // –°–Ω–∞—á–∞–ª–∞ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
                runBasicTestsInline(url)
                
                // Advanced tests
                testHttpHeaders(url)
                testDifferentHttpMethods(url)
                testWireguardEndpoints(url)
                
                if (password.isNotEmpty()) {
                    testAuthenticationFormats(url, password)
                }
                
                addLog("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
            } catch (e: Exception) {
                addLog("‚ùå –û—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: ${e.message}")
            } finally {
                _uiState.value = _uiState.value.copy(isRunning = false)
            }
        }
    }
    
    private suspend fun runBasicTestsInline(url: String) {
        testUrlValidation(url)
        testDnsResolution(url)
        testBasicConnectivity(url)
        testHttpResponse(url)
    }
    
    private suspend fun testUrlValidation(url: String) {
        addLog("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL...")
        
        try {
            val parsedUrl = URL(url)
            addLog("‚úÖ URL –≤–∞–ª–∏–¥–Ω—ã–π")
            addLog("   –ü—Ä–æ—Ç–æ–∫–æ–ª: ${parsedUrl.protocol}")
            addLog("   –•–æ—Å—Ç: ${parsedUrl.host}")
            addLog("   –ü–æ—Ä—Ç: ${if (parsedUrl.port != -1) parsedUrl.port else "default"}")
            addLog("   –ü—É—Ç—å: ${parsedUrl.path.ifEmpty { "/" }}")
        } catch (e: Exception) {
            addLog("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL: ${e.message}")
            throw e
        }
    }
    
    private suspend fun testDnsResolution(url: String) = withContext(Dispatchers.IO) {
        addLog("üåê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ DNS...")
        
        try {
            val parsedUrl = URL(url)
            val address = InetAddress.getByName(parsedUrl.host)
            addLog("‚úÖ DNS —Ä–∞–∑—Ä–µ—à–µ–Ω: ${address.hostAddress}")
        } catch (e: Exception) {
            addLog("‚ùå –û—à–∏–±–∫–∞ DNS: ${e.message}")
        }
    }
    
    private suspend fun testBasicConnectivity(url: String) = withContext(Dispatchers.IO) {
        addLog("üîå –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
        
        try {
            val client = OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.SECONDS)
                .readTimeout(10, TimeUnit.SECONDS)
                .build()
            
            val request = Request.Builder()
                .url(url)
                .head()
                .build()
            
            val response = client.newCall(request).execute()
            addLog("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            addLog("   –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${response.code}")
            addLog("   –°–æ–æ–±—â–µ–Ω–∏–µ: ${response.message}")
            response.close()
        } catch (e: Exception) {
            addLog("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${e.message}")
            
            when {
                e.message?.contains("timeout") == true -> {
                    addLog("‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã —Ç–∞–π–º–∞—É—Ç–∞:")
                    addLog("   - –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                    addLog("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç")
                    addLog("   - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–æ–º")
                }
                e.message?.contains("ConnectException") == true -> {
                    addLog("‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ:")
                    addLog("   - –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                    addLog("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å")
                }
            }
        }
    }
    
    private suspend fun testHttpResponse(url: String) = withContext(Dispatchers.IO) {
        addLog("üì° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –æ—Ç–≤–µ—Ç–∞...")
        
        try {
            val client = OkHttpClient.Builder()
                .connectTimeout(15, TimeUnit.SECONDS)
                .readTimeout(15, TimeUnit.SECONDS)
                .build()
            
            val request = Request.Builder()
                .url(url)
                .get()
                .build()
            
            val response = client.newCall(request).execute()
            val body = response.body?.string()?.take(200)
            
            addLog("‚úÖ HTTP –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
            addLog("   –ö–æ–¥: ${response.code}")
            addLog("   –†–∞–∑–º–µ—Ä: ${response.body?.contentLength() ?: "unknown"} –±–∞–π—Ç")
            addLog("   Content-Type: ${response.header("Content-Type") ?: "–Ω–µ —É–∫–∞–∑–∞–Ω"}")
            addLog("   Server: ${response.header("Server") ?: "–Ω–µ —É–∫–∞–∑–∞–Ω"}")
            if (!body.isNullOrEmpty()) {
                addLog("   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ (200 —Å–∏–º–≤.): $body...")
            }
            
            response.close()
        } catch (e: Exception) {
            addLog("‚ùå –û—à–∏–±–∫–∞ HTTP: ${e.message}")
        }
    }
    
    private suspend fun testHttpHeaders(url: String) = withContext(Dispatchers.IO) {
        addLog("üîç –ê–Ω–∞–ª–∏–∑ HTTP –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤...")
        
        try {
            val client = OkHttpClient.Builder()
                .connectTimeout(10, TimeUnit.SECONDS)
                .readTimeout(10, TimeUnit.SECONDS)
                .build()
            
            val request = Request.Builder()
                .url(url)
                .head()
                .build()
            
            val response = client.newCall(request).execute()
            
            addLog("üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:")
            response.headers.forEach { (name, value) ->
                addLog("   $name: $value")
            }
            
            response.close()
        } catch (e: Exception) {
            addLog("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${e.message}")
        }
    }
    
    private suspend fun testDifferentHttpMethods(url: String) = withContext(Dispatchers.IO) {
        addLog("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP –º–µ—Ç–æ–¥–æ–≤...")
        
        val client = OkHttpClient.Builder()
            .connectTimeout(5, TimeUnit.SECONDS)
            .readTimeout(5, TimeUnit.SECONDS)
            .build()
        
        val methods = listOf("GET", "POST", "HEAD", "OPTIONS")
        
        for (method in methods) {
            try {
                val requestBuilder = Request.Builder().url(url)
                
                val request = when (method) {
                    "GET" -> requestBuilder.get().build()
                    "POST" -> requestBuilder.post("".toRequestBody()).build()
                    "HEAD" -> requestBuilder.head().build()
                    "OPTIONS" -> requestBuilder.method("OPTIONS", null).build()
                    else -> requestBuilder.get().build()
                }
                
                val response = client.newCall(request).execute()
                addLog("‚úÖ $method: ${response.code} ${response.message}")
                response.close()
            } catch (e: Exception) {
                addLog("‚ùå $method: ${e.message}")
            }
        }
    }
    
    private suspend fun testWireguardEndpoints(url: String) = withContext(Dispatchers.IO) {
        addLog("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WireGuard —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
        
        val client = OkHttpClient.Builder()
            .connectTimeout(5, TimeUnit.SECONDS)
            .readTimeout(5, TimeUnit.SECONDS)
            .build()
        
        val endpoints = listOf(
            "api/wireguard/client",
            "api/clients",
            "api/session",
            "api/auth",
            "api/login"
        )
        
        val baseUrl = url.removeSuffix("/")
        
        for (endpoint in endpoints) {
            try {
                val testUrl = "$baseUrl/$endpoint"
                val request = Request.Builder()
                    .url(testUrl)
                    .get()
                    .build()
                
                val response = client.newCall(request).execute()
                addLog("‚úÖ /$endpoint: ${response.code} ${response.message}")
                
                if (response.code == 401) {
                    addLog("   üîê –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                }
                
                response.close()
            } catch (e: Exception) {
                addLog("‚ùå /$endpoint: ${e.message}")
            }
        }
    }
    
    private suspend fun testAuthenticationFormats(url: String, password: String) = withContext(Dispatchers.IO) {
        addLog("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
        
        val client = OkHttpClient.Builder()
            .connectTimeout(5, TimeUnit.SECONDS)
            .readTimeout(5, TimeUnit.SECONDS)
            .build()
        
        val baseUrl = url.removeSuffix("/")
        val authUrl = "$baseUrl/api/session"
        
        // Test JSON password format
        try {
            val json = """{"password":"$password"}"""
            val body = json.toRequestBody("application/json".toMediaType())
            val request = Request.Builder()
                .url(authUrl)
                .post(body)
                .build()
            
            val response = client.newCall(request).execute()
            addLog("üîç JSON password: ${response.code} ${response.message}")
            response.close()
        } catch (e: Exception) {
            addLog("‚ùå JSON password: ${e.message}")
        }
        
        // Test form data format
        try {
            val body = FormBody.Builder()
                .add("password", password)
                .build()
            val request = Request.Builder()
                .url(authUrl)
                .post(body)
                .build()
            
            val response = client.newCall(request).execute()
            addLog("üîç Form password: ${response.code} ${response.message}")
            response.close()
        } catch (e: Exception) {
            addLog("‚ùå Form password: ${e.message}")
        }
    }
    
    fun exportLog() {
        viewModelScope.launch {
            try {
                val timestamp = SimpleDateFormat("yyyy-MM-dd_HH-mm-ss", Locale.getDefault()).format(Date())
                val fileName = "network_diagnostics_$timestamp.txt"
                
                val logContent = buildString {
                    append("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ï–¢–ò WG ANDROID ===\n")
                    append("–î–∞—Ç–∞: ${SimpleDateFormat("dd.MM.yyyy HH:mm:ss", Locale.getDefault()).format(Date())}\n")
                    append("–°–µ—Ä–≤–µ—Ä: ${_uiState.value.serverUrl}\n")
                    append("–ü–∞—Ä–æ–ª—å: ${if (_uiState.value.password.isNotEmpty()) "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" else "–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}\n")
                    append("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===\n")
                    _uiState.value.logEntries.forEach { entry ->
                        append("$entry\n")
                    }
                    append("\n=== –ö–û–ù–ï–¶ –õ–û–ì–ê ===\n")
                }
                
                val downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS)
                val file = File(downloadsDir, fileName)
                
                FileWriter(file).use { writer ->
                    writer.write(logContent)
                }
                
                _uiState.value = _uiState.value.copy(
                    exportResult = "‚úÖ –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${file.absolutePath}"
                )
                
            } catch (e: Exception) {
                _uiState.value = _uiState.value.copy(
                    exportResult = "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: ${e.message}"
                )
            }
        }
    }
} 