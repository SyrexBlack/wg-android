package com.wgandroid.client.data.api

import android.util.Log
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.withContext
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaType
import okhttp3.RequestBody.Companion.toRequestBody
import okhttp3.logging.HttpLoggingInterceptor
import okio.Buffer
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import java.util.concurrent.TimeUnit

object SmartApiClient {
    private var retrofit: Retrofit? = null
    private var baseUrl: String = ""
    private var successfulFormat: LoginFormat? = null
    private var noAuthRequired: Boolean = false
    private val cookieJar = MemoryCookieJar()
    private var logCallback: ((String) -> Unit)? = null
    
    enum class LoginFormat {
        JSON_PASSWORD,
        JSON_PASS,
        FORM_PASSWORD,
        FORM_PASS,
        PLAIN_TEXT
    }
    
    fun setLogCallback(callback: (String) -> Unit) {
        logCallback = callback
    }
    
    private fun addLog(message: String) {
        Log.d("SmartApiClient", message)
        logCallback?.invoke(message)
    }
    
    suspend fun setServerConfig(url: String, pwd: String? = null) {
        baseUrl = if (url.endsWith("/")) url else "$url/"
        retrofit = null // Force recreation
        successfulFormat = null // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        noAuthRequired = false
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–æ–ª—å, –Ω–∞—Ö–æ–¥–∏–º —Ä–∞–±–æ—á–∏–π —Ñ–æ—Ä–º–∞—Ç –∏ –ª–æ–≥–∏–Ω–∏–º—Å—è
        if (pwd != null && pwd.isNotBlank()) {
            findWorkingFormatAndLogin(pwd)
        } else {
            // –ü—Ä–æ–±—É–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            addLog("üîì –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")
            tryWithoutAuth()
        }
    }
    
    private suspend fun tryWithoutAuth() = withContext(Dispatchers.IO) {
        if (baseUrl.isEmpty()) return@withContext
        
        addLog("üîç === –ü–†–û–í–ï–†–ö–ê –ë–ï–ó –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===")
        
        val client = OkHttpClient.Builder()
            .connectTimeout(10, TimeUnit.SECONDS)
            .readTimeout(10, TimeUnit.SECONDS)
            .writeTimeout(10, TimeUnit.SECONDS)
            .cookieJar(cookieJar)
            .addInterceptor(HttpLoggingInterceptor().apply {
                level = HttpLoggingInterceptor.Level.BODY
            })
            .build()
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        val endpoints = listOf(
            "api/wireguard/client",
            "api/clients"
        )
        
        for (endpoint in endpoints) {
            try {
                val testUrl = "$baseUrl$endpoint"
                addLog("üåê –ü—Ä–æ–±—É–µ–º GET $testUrl")
                
                val request = Request.Builder()
                    .url(testUrl)
                    .get()
                    .build()
                
                val response = client.newCall(request).execute()
                addLog("üì• Response: ${response.code} ${response.message}")
                
                if (response.isSuccessful) {
                    addLog("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ë–ï–ó –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                    noAuthRequired = true
                    successfulFormat = null
                    response.close()
                    return@withContext
                } else if (response.code == 401) {
                    addLog("üîê –≠–Ω–¥–ø–æ–∏–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é")
                } else {
                    addLog("‚ùå –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${response.code}")
                }
                
                response.close()
            } catch (e: Exception) {
                addLog("‚ùå –û—à–∏–±–∫–∞ –¥–ª—è $endpoint: ${e.message}")
            }
        }
        
        addLog("‚ùå –í—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    }
    
    private suspend fun findWorkingFormatAndLogin(pwd: String) = withContext(Dispatchers.IO) {
        if (baseUrl.isEmpty()) return@withContext
        
        addLog("üîç === –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–ò–°–ö –§–û–†–ú–ê–¢–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===")
        addLog("üåê Base URL: $baseUrl")
        addLog("üîë Password length: ${pwd.length}")
        
        val client = OkHttpClient.Builder()
            .connectTimeout(30, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .writeTimeout(30, TimeUnit.SECONDS)
            .cookieJar(cookieJar)
            .addInterceptor(HttpLoggingInterceptor().apply {
                level = HttpLoggingInterceptor.Level.BODY
            })
            .build()
        
        val formats = listOf(
            LoginFormat.JSON_PASSWORD,
            LoginFormat.JSON_PASS, 
            LoginFormat.FORM_PASSWORD,
            LoginFormat.FORM_PASS,
            LoginFormat.PLAIN_TEXT
        )
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        val endpoints = listOf(
            "api/session",
            "api/auth",
            "api/login",
            "session",
            "auth",
            "login"
        )
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
        try {
            addLog("üèì –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞...")
            val pingRequest = Request.Builder()
                .url(baseUrl)
                .get()
                .build()
            val pingResponse = client.newCall(pingRequest).execute()
            addLog("üèì Ping response: ${pingResponse.code} ${pingResponse.message}")
            pingResponse.close()
        } catch (e: Exception) {
            addLog("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${e.message}")
        }
        
        var totalAttempts = 0
        val maxAttempts = formats.size * endpoints.size
        
                for (endpoint in endpoints) {
            addLog("üéØ –ü—Ä–æ–±—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç: $endpoint")
            
            for (format in formats) {
                totalAttempts++
                try {
                    addLog("üîç [$totalAttempts/$maxAttempts] $endpoint + $format")
                    
                    val request = createLoginRequestForEndpoint(endpoint, format, pwd)
                    addLog("üì§ Request URL: ${request.url}")
                    addLog("üì§ Request Method: ${request.method}")
                    addLog("üì§ Request Headers: ${request.headers}")
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
                    val cleanPwd = pwd.trim()
                    val bodyDescription = when (format) {
                        LoginFormat.JSON_PASSWORD -> """{"password":"$cleanPwd"}"""
                        LoginFormat.JSON_PASS -> """{"pass":"$cleanPwd"}"""
                        LoginFormat.FORM_PASSWORD -> "password=$cleanPwd"
                        LoginFormat.FORM_PASS -> "pass=$cleanPwd"
                        LoginFormat.PLAIN_TEXT -> cleanPwd
                    }
                    addLog("üì§ Request Body: $bodyDescription")
                    
                    val response = client.newCall(request).execute()
                    val responseBody = response.body?.string()
                    
                    addLog("üì• [$endpoint/$format] Response Code: ${response.code}")
                    addLog("üì• [$endpoint/$format] Response Message: ${response.message}")
                    addLog("üì• [$endpoint/$format] Response Headers: ${response.headers}")
                    addLog("üì• [$endpoint/$format] Response Body: ${responseBody?.take(500)}...")
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ
                    when {
                        response.isSuccessful -> {
                            successfulFormat = format
                            addLog("‚úÖ SUCCESS! Endpoint: $endpoint, Format: $format")
                            addLog("üç™ Set-Cookie headers: ${response.headers("Set-Cookie")}")
                            response.close()
                            return@withContext
                        }
                        response.code == 401 -> {
                            addLog("üîê [$endpoint/$format] Unauthorized - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç")
                        }
                        response.code == 404 -> {
                            addLog("üö´ [$endpoint/$format] Not Found - —ç–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                        }
                        response.code == 403 -> {
                            addLog("‚õî [$endpoint/$format] Forbidden - –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
                        }
                        response.code == 405 -> {
                            addLog("üö∑ [$endpoint/$format] Method Not Allowed - –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π HTTP –º–µ—Ç–æ–¥")
                        }
                        response.code >= 500 -> {
                            addLog("üî• [$endpoint/$format] Server Error - –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                        }
                        else -> {
                            addLog("‚ùå [$endpoint/$format] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${response.code}")
                        }
                    }
                    
                    response.close()
                } catch (e: Exception) {
                    addLog("üí• [$endpoint/$format] –û—à–∏–±–∫–∞: ${e.message}")
                    addLog("üí• [$endpoint/$format] –¢–∏–ø –æ—à–∏–±–∫–∏: ${e.javaClass.simpleName}")
                    if (e.message?.contains("timeout") == true) {
                        addLog("‚è∞ [$endpoint/$format] –¢–∞–π–º–∞—É—Ç - —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤–æ–≤—Ä–µ–º—è")
                    } else if (e.message?.contains("ConnectException") == true) {
                        addLog("üîå [$endpoint/$format] –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É")
                    } else if (e.message?.contains("UnknownHostException") == true) {
                        addLog("üåê [$endpoint/$format] –•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    }
                }
            }
        }
        
        addLog("‚ùå === –í–°–ï –§–û–†–ú–ê–¢–´ –ò –≠–ù–î–ü–û–ò–ù–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨ ===")
        addLog("‚ùå –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ $totalAttempts –∫–æ–º–±–∏–Ω–∞—Ü–∏–π")
        throw Exception("All login formats failed! Check server and password.")
    }
    
    private fun createLoginRequest(format: LoginFormat, password: String): Request {
        return createLoginRequestForEndpoint("api/session", format, password)
    }
    
    private fun createLoginRequestForEndpoint(endpoint: String, format: LoginFormat, password: String): Request {
        val url = "$baseUrl$endpoint"
        
        val cleanPassword = password.trim() // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
        
        return when (format) {
            LoginFormat.JSON_PASSWORD -> {
                val json = """{"password":"$cleanPassword"}"""
                val body = json.toRequestBody("application/json".toMediaType())
                Request.Builder().url(url).post(body).build()
            }
            
            LoginFormat.JSON_PASS -> {
                val json = """{"pass":"$cleanPassword"}"""
                val body = json.toRequestBody("application/json".toMediaType())
                Request.Builder().url(url).post(body).build()
            }
            
            LoginFormat.FORM_PASSWORD -> {
                val body = FormBody.Builder()
                    .add("password", cleanPassword)
                    .build()
                Request.Builder().url(url).post(body).build()
            }
            
            LoginFormat.FORM_PASS -> {
                val body = FormBody.Builder()
                    .add("pass", cleanPassword)
                    .build()
                Request.Builder().url(url).post(body).build()
            }
            
            LoginFormat.PLAIN_TEXT -> {
                val body = cleanPassword.toRequestBody("text/plain".toMediaType())
                Request.Builder().url(url).post(body).build()
            }
        }
    }
    
    fun getApiService(): WgEasyApiService {
        if (baseUrl.isEmpty()) {
            throw IllegalStateException("Server URL not configured. Call setServerConfig() first.")
        }
        
        // successfulFormat –º–æ–∂–µ—Ç –±—ã—Ç—å null, –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã —Ö–æ—Ç—è –±—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        
        // Lazy initialization
        if (retrofit == null) {
            retrofit = createRetrofit()
        }
        
        return retrofit!!.create(WgEasyApiService::class.java)
    }
    
    private fun createRetrofit(): Retrofit {
        val httpClient = OkHttpClient.Builder()
            .connectTimeout(30, TimeUnit.SECONDS)
            .readTimeout(30, TimeUnit.SECONDS)
            .writeTimeout(30, TimeUnit.SECONDS)
            .cookieJar(cookieJar)
            .addInterceptor(HttpLoggingInterceptor().apply {
                level = HttpLoggingInterceptor.Level.BODY
            })
            .build()
        
        return Retrofit.Builder()
            .baseUrl(baseUrl)
            .client(httpClient)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
    }
    
    private class MemoryCookieJar : CookieJar {
        private val cookies = mutableMapOf<String, List<Cookie>>()
        
        override fun saveFromResponse(url: HttpUrl, cookies: List<Cookie>) {
            this.cookies[url.host] = cookies
        }
        
        override fun loadForRequest(url: HttpUrl): List<Cookie> {
            return cookies[url.host] ?: emptyList()
        }
    }
    
    fun getSuccessfulFormat(): String? {
        return when {
            successfulFormat != null -> successfulFormat!!.name
            noAuthRequired -> "NO_AUTH_REQUIRED"
            else -> null
        }
    }
} 